#!/usr/bin/env node

var app 	= require('../app.js');
var appSSL 	= require('../appSSL.js');
var config 	= require('../config');
var debug 	= require('debug')('ServerBonus:server');
var http 	= require('http');
var https 	= require('https');
var models 	= require('../models');

var port 	= normalizePort(process.env.PORT || config.port);
var portSSL = normalizePort(process.env.PORT || config.portSSL);

app.set('port', port);
appSSL.set('port', portSSL);

var server = http.createServer(app);
var serverSSL = http.createServer(appSSL);

models.sequelize.sync().then(function() {
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	serverSSL.listen(portSSL);
	server.on('error', onError);
	server.on('listening', onListening);
});

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port))
		return val;

	if (port >= 0)
		return port;

	return false;
}

function onError(error) {
	if (error.syscall !== 'listen')
		throw error;
	
	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
	
	switch (error.code)
	{
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}