extends ../../base/layout

block content
	main.article
		h1.center Reverse Engineering Volume 1 Chapter 1 - Basics of basics
		p In this chapter we'll continue our journey in memory editing and reverse engineering. This time we'll write a program to do the same we did in last chapter.
		p First of all, let's gather what we found out in previous chapter.
		p HP memory address is
			code 0x49E6CC
			| .
		img(src='/img/article/rev1c1/8.png')
		p But wait.
			code 0x49E6CC
			|  is a static memory address and we know that programs can be loaded into different memory regions. If we RMB=>Browse this memory region, we can see, that it's actually
			code Doukutsu.exe + 0x9E6C8
			| .
		img(src='/img/article/rev1c2/1.png')
		p And that function that damages player is located at
			code Doukutsu.exe + 0x19978
			| .
		img(src='/img/article/rev1c1/11.png')
		p Before we even start, here is a useful snippet. It prints out all the processes and their modules.
		script(src='https://gist.github.com/BonusPlay3/8086661caf7b1512188be2fbf9d1f8c4.js')
		p Guess what. Another snippet. This one will be your best friend. You should study it carefully before using.
		script(src='https://gist.github.com/BonusPlay3/7b4e17462ce9a5d4c7b581dcbf56cac0.js')
		p Done reading? Great. Let's dive into code agin.
		script(src='https://gist.github.com/BonusPlay3/d00a3de1030d091783f9acebaa8ec827.js')
		p Before we move forward you need to understand the concept of pattern scanning. Remember that each ASM command is
			a(href='https://en.wikipedia.org/wiki/X86_instruction_listings') represented by bytes
			| . Pattern scanning is a method where you search for a pattern of bytes. You might want to as a question:
		i But hey, what if there will be a byte that represents a variable that we don't know?
		p That's why we have wildcards in byte patterns. Here is an example.
		img(src='/img/article/rev1c2/2.png')
		p We can see that the pattern here will be
			code 0F BF 45 08 0F BF 0D ? ? ? ? 2B C8
			|  since we don't know the value of
			code CCE64900
			| .
		p Coming back to the code.
		code DWORD dmgFunction = memory->FindPattern(memory->GetGameBase(), memory->GetGameBaseSize(), "0F BF 45 08 0F BF 0D ? ? ? ? 2B C8", NORMAL, 0x0, 0xB);
		p This line does a pattern scan for the damage player function. We pass in
			code 0xB
			|  since this pattern will give us the
			code Doukutsu.exe + 0x1996D
			|  and we want
			code Doukutsu.exe + 0x19978
			|  we simply add
			code 0xB
			| .
		p We just overwrote game code.
		img(src='/img/article/rev1c1/13.png')
		p That concludes this chapter. In the next chapter we will learn how to handle pointers!